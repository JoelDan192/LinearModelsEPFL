model.matrix(~ day + condition)
day <- factor(c('A','B','C','A','B','C'))
condition <- factor(c('treated','treated','treated','control','control','control'))
model.matrix(~ day + condition)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv"
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- "femaleMiceWeights.csv"
library(download)
if(!file.exists(filename)) download(url,filename)
dat <- read.csv(filename)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- "femaleMiceWeights.csv"
library(downloader)
if(!file.exists(filename)) download(url,filename)
dat <- read.csv(filename)
install(downloader)
install.packages(downloader)
install.packages("downloader")
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- "femaleMiceWeights.csv"
library(downloader)
if(!file.exists(filename)) download(url,filename)
dat <- read.csv(filename)
dat
stripchart(dat$Bodyweight ~ dat$Diet,vertical = TRUE, method="jitter", main = "Bodyweight over Diet")
stripchart(dat$Bodyweight ~ dat$Diet,vertical = TRUE, method="jitter", main = "Bodyweight over Diet")
levels(dat$Diet)
levels(dat$Diet)
X <- model.matrix(~ Diet, data=dat)
X
colnames(X)
dat$Diet <- relevel(dat$Diet, ref ='hf')
dat$Diet
dat$Diet <- relevel(dat$Diet, ref ='hf')
X <- model.matrix(~ Diet, data=dat)
X
dat$Diet <- relevel(dat$Diet, ref ='chow')
X <- model.matrix(~ Diet, data=dat)
X
fit <- lm(Bodyweight ~ Diet, data=dat)  # the Y here is the Bodyweight, and we want to model it over the Diet
summary(fit)
(coefs <- coef(fit))
Y <- dat$Bodyweight
X <- model.matrix(~ Diet, data=dat)
solve(t(X) %*% X) %*% t(X) %*% Y
s <- split(dat$Bodyweight, dat$Diet)
s
class(s)
mean(s[["chow"]])
mean(s[["hf"]]) - mean(s[["chow"]])
stripchart(dat$Bodyweight ~ dat$Diet, vertical=TRUE, method="jitter", main="Bodyweight over Diet",
ylim=c(0,40),xlim=c(0,3))
install.package("RColorBrewer")
install.packages("RColorBrewer")
stripchart(dat$Bodyweight ~ dat$Diet, vertical=TRUE, method="jitter", main="Bodyweight over Diet",
ylim=c(0,40),xlim=c(0,3))
a <- -0.25
lgth <- .1
library(RColorBrewer)
cols <- brewer.pal(3,"Dark2")
abline(h=0)
coefs[1]
arrows(1+a,0, 1+a, coefs[1])
arrows(1+a,0, 1+a, coefs[1],lwd=3,col=cols[1], length=lgth)
abline(h=coefs[1],col=cols[1])
arrows(2+a,coefs[1], 2+a, coefs[1]+coefs[2],lwd=3,col=cols[2], length=lgth)
abline(h=coefs[1]+coefs[2],col=cols[2])
summary(fit)$coefficients
nx <- 5
ny <- 7
X = cbind(rep(1,nx + ny),rep(c(0,1),c(nx, ny)))
X
t(X)*X
t(X)%*%X
sex <- factor(rep(c("female","male"),each=4))
trt <- factor(c("A","A","B","B","C","C","D","D"))
X <- model.matrix( ~ sex + trt)
qr(X)$rank
Y <- 1:8
makeYstar <- function(a,b) Y - X[,2] * a - X[,5] * b
fitTheRest <- function(a,b) {
Ystar <- makeYstar(a,b)
Xrest <- X[,-c(2,5)]
betarest <- solve(t(Xrest) %*% Xrest) %*% t(Xrest) %*% Ystar
residuals <- Ystar - Xrest %*% betarest
sum(residuals^2)
}
fitTheRest(1,2)
outer(1:3,1:3,`*`)
min(outer(-2:8,-2:8,Vectorize(fitTheRest)))
library(rafalib)
imagemat(outer(-2:8,-2:8,Vectorize(fitTheRest)))
fit <- lm(friction ~ type + leg, data=spider)
betahat <- coef(fit)
Y <- matrix(spider$friction, ncol=1)
X <- model.matrix(~ type + leg, data=spider)
QR <- qr(X)
Q <- qr.Q( QR )
Q[1,1]
R <- qr.R( QR )
R[1,1]
t(Q)%*%Y
solve(R)%*%t(Q)%*%Y
q()
library(faraway)
install.packages(faraway)
install.packages(faraway)
install.packages("faraway")
install.packages("faraway")
data(pima)
pima
library(faraway)
data(pima)
pima
summary(pima)
sort(diastolic)
attach(pima)
sort(diastolic)
diastolic[diastolic==0]
pregnant[pregnant==0] <- NA
glucose[glucose==0] <- NA
diastolic[diastolic==0] <- NA
triceps[triceps==0] <- NA
insulin[insulin==0] <- NA
diabetes[diabetes==0] <- NA
age[age==0] <- NA
summary(pima)
y <- c(1,2,3,0,1,5)
y
x <- c(1,0,2,0,1,0)
a <- c(1,1,1,2,2,2)
b <- c(1,2,3,1,2,3)
X <. cbind(x,a,b)
X <- cbind(x,a,b)
X
y <- cbind(y)
y
y <- cbind(y)
y~x
y~x
rep <- y~x
rep
fit <- lm(y~x)
fit
mm <- model.matrix(~x)
mm
MM <- model.matrix(~x)
MM
MM <- model.matrix(~x-1)
MM
MM <- model.matrix(~x+a)
MM
MM <- model.matrix(~a-1)
MM
MM <- model.matrix(~a+b)
MM
library(MASS)
bivn <- mvrnorm(1000, mu = c(0, 0), Sigma = matrix(c(1, .5, .5, 1), 2))
# now we do a kernel density estimate
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)
# now plot your results
contour(bivn.kde)
image(bivn.kde)
persp(bivn.kde, phi = 45, theta = 30)
# fancy contour with image
image(bivn.kde); contour(bivn.kde, add = T)
# fancy perspective
persp(bivn.kde, phi = 45, theta = 30, shade = .1, border = NA)
matrix(c(1, 0, 0, 1), 2))
matrix(c(1, 0, 0, 1), 2)
matrix(c(1, 2, 3, 4), 2)
bivn <- mvrnorm(1000, mu = c(0, 0), Sigma = matrix(c(1, 0, 0, 1), 2))
persp(bivn, phi = 45, theta = 30)
bivn <- mvrnorm(1000, mu = c(0, 0), Sigma = matrix(c(1, 0, 0, 1), 2))
# now we do a kernel density estimate
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)
# now plot your results
contour(bivn.kde)
image(bivn.kde)
persp(bivn.kde, phi = 45, theta = 30)
swiss
?swiss
pairs(swiss)
cor(swiss)
cor(swiss)  # correlation matrix
boxplot(swiss)
plot(swiss$Examination, swiss$Fertility)
plot(swiss$Infant.Mortality, swiss$Fertility)
fit = lm(Fertility~Examination+Infant.Mortality, data=swiss)  # explain Fertility using Examination and Infant.Mortality
summary(fit)
summary(fit)
confint(fit)  #  buid confidence intervals
model.matrix(fit)  # we get the X matrix
fit = lm(Fertility~Examination+Infant.Mortality, data=swiss)  # explain Fertility using Examination and Infant.Mortality
summary(fit)
# les stars donnent un avis about the significance of the estimate
confint(fit)  #  buid confidence intervals
model.matrix(fit)  # we get the X matrix
plot(swiss$Examination, rstandard(fit))
plot(swissÂ£Infant.Mortality, rstandard(fit))
plot(swiss$Infant.Mortality, rstandard(fit))
?rstandard
plot(fitted(fit), rstandard(fit))  # fitted() gives the y-hat, rstandard() gives the standardized residuals
plot(fitted(fit), rstandard(fit),ylim=c(-3,3), xlab="fitted values", ylab="standardized residuals")
qqnorm(rstandard(fit))
qqline(rstandard(fit))
plot(cooks.distance(fit))
p <- dim(model.matrix(fit))[2]
n <- dim(model.matrix(fit))[1]
abline(8/(n-2*p),0)
identify(cooks.distance(fit),labels=rownames(swiss))
plot(hatvalues(fit))
abline(2*p/n,0)
identify(hatvalues(fit), labels=rownames(swiss))
plot(swiss$Examination, swiss$Fertility)
text(swiss$Examination[19], swiss$Fertility[19], rownames(swiss)[19])
plot(swiss$Infant.Mortality, swiss$Fertility)
text(swiss$Infant.Mortality[19], swiss$Fertility[19], rownames(swiss)[19])
?hatvalues
swiss
?swiss
pairs(swiss)   # squater plots
# Look if fertility is correlated with the other variables
cor(swiss)  # correlation matrix
boxplot(swiss)
hist(swiss$Catholic)
plot(swiss$Examination, swiss$Fertility)
plot(swiss$Infant.Mortality, swiss$Fertility)
fit = lm(Fertility~Examination+Infant.Mortality, data=swiss)  # explain Fertility using Examination and Infant.Mortality
summary(fit)
load('cars.RData')
# ------------------------- Observation of the DATA --------------------------
# the response y : 100 / City MPG
hundredOverMPG <- rep(100,82) / cars$CityMPG
# the variables
weights <- cars$Weight
HPOverWeight <- cars$Horsepower / cars$Weight
# Look if there is a correlation between our y and the variable we are going to use
plot(weights, hundredOverMPG, xlab='Weights', ylab='100 / City MPG', main = 'Plot of the weights against the fuel efficiency')
plot(HPOverWeight, hundredOverMPG)
# correlations
cor(weights, hundredOverMPG)
cor(HPOverWeight, hundredOverMPG)
# Boxplots of the y and the variables
boxplot(hundredOverMPG, main='Fuel efficiency ( 100 / city MPG )')
boxplot(weights, main='Weights of the cars')
boxplot(HPOverWeight, main='Horsepower over the weight')
# Scatter plot
pairs(cbind(hundredOverMPG, weights, HPOverWeight), main='scatter plot of the y and the variables')
# -------------------------- The Fit -----------------------------
fit = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit)
fit = lm(hundredOverMPG ~ weights + HPOverWeight)
load('cars.RData')
setwd("~/Google Drive/EPFL/Bachelor 7/ModLin/Practicals/p1_remote/LinearModelsEPFL")
load('cars.RData')
# ------------------------- Observation of the DATA --------------------------
# the response y : 100 / City MPG
hundredOverMPG <- rep(100,82) / cars$CityMPG
# the variables
weights <- cars$Weight
HPOverWeight <- cars$Horsepower / cars$Weight
# Look if there is a correlation between our y and the variable we are going to use
plot(weights, hundredOverMPG, xlab='Weights', ylab='100 / City MPG', main = 'Plot of the weights against the fuel efficiency')
plot(HPOverWeight, hundredOverMPG)
# correlations
cor(weights, hundredOverMPG)
cor(HPOverWeight, hundredOverMPG)
# Boxplots of the y and the variables
boxplot(hundredOverMPG, main='Fuel efficiency ( 100 / city MPG )')
boxplot(weights, main='Weights of the cars')
boxplot(HPOverWeight, main='Horsepower over the weight')
# Scatter plot
pairs(cbind(hundredOverMPG, weights, HPOverWeight), main='scatter plot of the y and the variables')
# -------------------------- The Fit -----------------------------
fit = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit)
summary(fit)
confint(fit)  #  buid confidence intervals
confin?
?confin
?confint
load('cars.RData')
# ------------------------- Observation of the DATA --------------------------
# the response y : 100 / City MPG
hundredOverMPG <- rep(100,82) / cars$CityMPG
# the variables
weights <- cars$Weight
HPOverWeight <- cars$Horsepower / cars$Weight
# Look if there is a correlation between our y and the variable we are going to use
plot(weights, hundredOverMPG, xlab='Weights', ylab='100 / City MPG', main = 'Plot of the weights against the fuel efficiency')
plot(HPOverWeight, hundredOverMPG)
# correlations
cor(weights, hundredOverMPG)
cor(HPOverWeight, hundredOverMPG)
# Boxplots of the y and the variables
boxplot(hundredOverMPG, main='Fuel efficiency ( 100 / city MPG )')
boxplot(weights, main='Weights of the cars')
boxplot(HPOverWeight, main='Horsepower over the weight')
# Scatter plot
pairs(cbind(hundredOverMPG, weights, HPOverWeight), main='scatter plot of the y and the variables')
# -------------------------- The Fit -----------------------------
fit = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit)
confint(fit)  #  buid confidence intervals
# -------------------------- Fist Analysis -----------------------
#1 --- check for linearity : plot the variables against the standardised residuals
plot(weights, rstandard(fit), xlab='weights', ylab='standardised residuals')
plot(HPOverWeight, rstandard(fit), xlab='Horsepower over weight', ylab='standardised residuals')
#now we plot the fitted y against the standardised residuals
plot(fitted(fit), rstandard(fit), xlab='fitted values', ylab='standardised residuals', ylim=c(-3,3))
# remarque: on voit sur le plot qu il y a une voir 2 valeurs abÃ©rantes. Il va falloir les identifier
# homoskedasticity : ok
#2 --- check for normality with QQ plot
qqnorm(rstandard(fit))
qqline(rstandard(fit))
#3 --- Cook Distance, check for outliers and/or leverage points
plot(cooks.distance(fit), xlab='Observations', ylab='Cook distance', main='Cook Distance Plot')
p <- dim(model.matrix(fit))[2]
n <- dim(model.matrix(fit))[1]
abline(8/(n-2*p),0)
identify(cooks.distance(fit),labels=rownames(cars))
# rem: we se that observation 80 and 37 crosses the cook distance
# check for leverage points
plot(hatvalues(fit))
abline(2*p/n,0)
identify(hatvalues(fit), labels=rownames(cars))
plot(weights, hundredOverMPG)
text(weights[37], hundredOverMPG[37], rownames(cars)[37])
plot(weights, hundredOverMPG)
text(weights[37], hundredOverMPG[37], rownames(cars)[37])
text(weights[80], hundredOverMPG[80], rownames(cars)[80])
plot(HPOverWeight, hundredOverMPG)
plot(weights, hundredOverMPG)
text(weights[37], hundredOverMPG[37], rownames(cars)[37])
text(weights[80], hundredOverMPG[80], rownames(cars)[80])
plot(HPOverWeight, hundredOverMPG)
text(HPOverWeight[37], hundredOverMPG[37], rownames(cars)[37])
text(HPOverWeight[80], hundredOverMPG[80], rownames(cars)[80])
hundredOverMPG <- rep(100,80) / cars2$CityMPG
# the variables
weights <- cars2$Weight
HPOverWeight <- cars2$Horsepower / cars2$Weight
fit = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit)
cars2 <- cars[-c(37,80),]
# the response y : 100 / City MPG
hundredOverMPG <- rep(100,80) / cars2$CityMPG
# the variables
weights <- cars2$Weight
HPOverWeight <- cars2$Horsepower / cars2$Weight
fit = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit)
confint(fit)
#1 --- check for linearity : plot the variables against the standardised residuals
plot(weights, rstandard(fit), xlab='weights', ylab='standardised residuals')
plot(HPOverWeight, rstandard(fit), xlab='Horsepower over weight', ylab='standardised residuals')
#now we plot the fitted y against the standardised residuals
plot(fitted(fit), rstandard(fit), xlab='fitted values', ylab='standardised residuals', ylim=c(-3,3))
# remarque: on voit sur le plot qu il y a une voir 2 valeurs abÃ©rantes. Il va falloir les identifier
# homoskedasticity : ok
#2 --- check for normality with QQ plot
qqnorm(rstandard(fit))
qqline(rstandard(fit))
plot(fitted(fit), rstandard(fit), xlab='fitted values', ylab='standardised residuals', ylim=c(-3,3))
plot(fitted(fit), rstandard(fit), xlab='fitted values', ylab='standardised residuals', ylim=c(-3,3))
load('cars.RData')
# ------------------------- Observation of the DATA --------------------------
# the response y : 100 / City MPG
hundredOverMPG <- rep(100,82) / cars$CityMPG
# the variables
weights <- cars$Weight
HPOverWeight <- cars$Horsepower / cars$Weight
# Look if there is a correlation between our y and the variable we are going to use
plot(weights, hundredOverMPG, xlab='Weights', ylab='100 / City MPG', main = 'Plot of the weights against the fuel efficiency')
plot(HPOverWeight, hundredOverMPG)
# correlations
cor(weights, hundredOverMPG)
cor(HPOverWeight, hundredOverMPG)
# Boxplots of the y and the variables
boxplot(hundredOverMPG, main='Fuel efficiency ( 100 / city MPG )')
boxplot(weights, main='Weights of the cars')
boxplot(HPOverWeight, main='Horsepower over the weight')
# Scatter plot
pairs(cbind(hundredOverMPG, weights, HPOverWeight), main='scatter plot of the y and the variables')
# -------------------------- The Fit -----------------------------
fit = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit)
confint(fit)  #  buid confidence intervals
# -------------------------- Fist Analysis -----------------------
#1 --- check for linearity : plot the variables against the standardised residuals
plot(weights, rstandard(fit), xlab='weights', ylab='standardised residuals')
pairs(cbind(hundredOverMPG, weights, HPOverWeight), main='scatter plot of the y and the variables')
fit = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit)
confint(fit)  #  buid confidence intervals
# -------------------------- Fist Analysis -----------------------
#1 --- check for linearity : plot the variables against the standardised residuals
plot(weights, rstandard(fit), xlab='weights', ylab='standardised residuals')
plot(HPOverWeight, rstandard(fit), xlab='Horsepower over weight', ylab='standardised residuals')
#now we plot the fitted y against the standardised residuals
plot(fitted(fit), rstandard(fit), xlab='fitted values', ylab='standardised residuals', ylim=c(-3,3))
load('cars.RData')
# ------------------------- Observation of the DATA --------------------------
# the response y : 100 / City MPG
hundredOverMPG <- rep(100,82) / cars$CityMPG
# the variables
weights <- cars$Weight
HPOverWeight <- cars$Horsepower / cars$Weight
# Look if there is a correlation between our y and the variable we are going to use
plot(weights, hundredOverMPG, xlab='Weights', ylab='100 / City MPG', main = 'Plot of the weights against the fuel efficiency')
plot(HPOverWeight, hundredOverMPG)
# correlations
cor(weights, hundredOverMPG)
cars3 <- cars[-c(37)]
hundredOverMPG <- rep(100,81) / cars2$CityMPG
HPOverWeight <- cars2$Horsepower / cars2$Weight
fit = lm(hundredOverMPG ~ weights + HPOverWeight)
cars3 <- cars[-c(37)]
hundredOverMPG <- rep(100,81) / cars3$CityMPG
HPOverWeight <- cars3$Horsepower / cars3$Weight
fit = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit)
confint(fit)
cars3 <- cars[-c(37)]
hundredOverMPG <- rep(100,81) / cars3$CityMPG
HPOverWeight <- cars3$Horsepower / cars3$Weight
fit3 = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit3)
confint(fit3)
cars3 <- cars[-c(37)]
cars3 <- cars[-c(37)]
length(cars3)
cars3 <- cars[-c(37),]
hundredOverMPG <- rep(100,81) / cars3$CityMPG
HPOverWeight <- cars3$Horsepower / cars3$Weight
fit3 = lm(hundredOverMPG ~ weights + HPOverWeight)
length(cars3)
length(cars)
head(cars3)
cars2 <- cars[-c(37,80),]
# the response y : 100 / City MPG
hundredOverMPG <- rep(100,80) / cars2$CityMPG
# the variables
weights <- cars2$Weight
HPOverWeight <- cars2$Horsepower / cars2$Weight
fit = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit)
cars3 <- cars[-c(37),]
hundredOverMPG <- rep(100,81) / cars3$CityMPG
HPOverWeight <- cars3$Horsepower / cars3$Weight
fit3 = lm(hundredOverMPG ~ weights + HPOverWeight)
cars3 <- cars[-c(37),]
hundredOverMPG <- rep(100,81) / cars3$CityMPG
HPOverWeight <- cars3$Horsepower / cars3$Weight
weights <- cars3$Weight
fit3 = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit3)
confint(fit3)
fit3 = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit3)
confint(fit3)
plot(fitted(fit3), rstandard(fit3), xlab='fitted values', ylab='standardised residuals', ylim=c(-3,3))
qqnorm(rstandard(fit3))
qqline(rstandard(fit3))
cars4 <- cars[-c(80),]
hundredOverMPG <- rep(100,81) / cars4$CityMPG
HPOverWeight <- cars4$Horsepower / cars4$Weight
weights <- cars4$Weight
fit4 = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit4)
plot(fitted(fit4), rstandard(fit4), xlab='fitted values', ylab='standardised residuals', ylim=c(-3,3))
cars2 <- cars[-c(37,80),]
# the response y : 100 / City MPG
hundredOverMPG <- rep(100,80) / cars2$CityMPG
# the variables
weights <- cars2$Weight
HPOverWeight <- cars2$Horsepower / cars2$Weight
fit = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit)
confint(fit)
#1 --- check for linearity : plot the variables against the standardised residuals
plot(weights, rstandard(fit), xlab='weights', ylab='standardised residuals')
plot(HPOverWeight, rstandard(fit), xlab='Horsepower over weight', ylab='standardised residuals')
#now we plot the fitted y against the standardised residuals
plot(fitted(fit), rstandard(fit), xlab='fitted values', ylab='standardised residuals', ylim=c(-3,3))
# remarque: on voit sur le plot qu il y a une voir 2 valeurs abÃ©rantes. Il va falloir les identifier
# homoskedasticity : ok
#2 --- check for normality with QQ plot
qqnorm(rstandard(fit))
qqline(rstandard(fit))
#3 --- Cook Distance, check for outliers and/or leverage points
plot(cooks.distance(fit), xlab='Observations', ylab='Cook distance', main='Cook Distance Plot', ylim=c(0,0.2))
p <- dim(model.matrix(fit))[2]
n <- dim(model.matrix(fit))[1]
abline(8/(n-2*p),0)
plot(hatvalues(fit))
abline(2*p/n,0)
?hatvalues
plot(hatvalues(fit))
abline(2*p/n,0)
cars4 <- cars[-c(80),]
hundredOverMPG <- rep(100,81) / cars4$CityMPG
HPOverWeight <- cars4$Horsepower / cars4$Weight
weights <- cars4$Weight
fit4 = lm(hundredOverMPG ~ weights + HPOverWeight)
summary(fit4)
confint(fit4)
plot(fitted(fit4), rstandard(fit4), xlab='fitted values', ylab='standardised residuals', ylim=c(-3,3))
plot(fitted(fit4), rstandard(fit4), xlab='fitted values', ylab='standardised residuals', ylim=c(-3,3))
qqnorm(rstandard(fit4))
qqline(rstandard(fit4))
